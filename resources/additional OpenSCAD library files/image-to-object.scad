/*
   plane and cylindrical images
   
   creates a modulated plane surface or a partial cylindrical object using included data generated from a JPG file
   to create a relief or intaglio (as for a lithophane) surface
   
   image file is generated by image_to_openscad.py
   
   Kit Wallace March 2015
   
   - need to handle closed curve
   
   Code licensed under the Creative Commons - Attribution - Share Alike license.

*/

function reverse(l) = 
//  reverse the elements of an array
     [for (i=[1:len(l)]) l[len(l)-i]]; 

// ------------------ generic dual surface faces --------------

function vt(i,j,nx,ny) = i +j*nx ;
function vb(i,j,nx,ny) = nx*ny + i +j*nx;
  
function surface_faces (nx,ny) = 
  concat(     //  top
      [for (i=[0:nx-2])
        for (j=[0:ny-2])
            reverse([vt(i,j,nx,ny),
            vt(i+1,j,nx,ny),
            vt(i+1,j+1,nx,ny),
            vt(i,j+1,nx,ny)])   
     ], // bottom
     [for (i=[0:nx-2])
        for (j=[0:ny-2])
             [vb(i,j,nx,ny),
              vb(i+1,j,nx,ny),
              vb(i+1,j+1,nx,ny),
              vb(i,j+1,nx,ny)
             ]
     ],  // sides
     [for (i=[0:nx-2])
           [vt(i,0,nx,ny),
            vt(i+1,0,nx,ny),
            vb(i+1,0,,nx,ny),
            vb(i,0,,nx,ny)
           ]
     ],
    [for (i=[0:nx-2])
          reverse( [vt(i,ny-1,nx,ny),
            vt(i+1,ny-1,nx,ny),
            vb(i+1,ny-1,nx,ny),
            vb(i,ny-1,nx,ny)
           ])
    ],
    [for (j=[0:ny-2])
        reverse( [vt(0,j,nx,ny),
         vt(0,j+1,nx,ny),
         vb(0,j+1,nx,ny),
         vb(0,j,nx,ny)])
    ],
     [for (j=[0:ny-2])
        [vt(nx-1,j,nx,ny),
         vt(nx-1,j+1,nx,ny),
         vb(nx-1,j+1,nx,ny),
         vb(nx-1,j,nx,ny)]
     ]
    );

// ----------------- surface with functional modulation --------------
function fsurface(x,y) = 10* sin(y*180);
function ftop(x,y) = fsurface(x,y);
function fbottom(x,y) = ftop(x,y);         
// function fsurface(x,y) = 0;      
function image_plane(width,height,nx,ny,surface,depth=1,offset=0,sign) =   
      [for (j=[0:ny-1])
         for (i=[0:nx-1])
           let (eij= surface[i][ny-1-j] * depth,
               x= i/nx,
               y= j/ny,
               z = ftop(x,y))  
           [width * x, 
            height* y, 
            offset + z + sign*eij]    
     ]; 

function clear_plane(width,height,nx,ny,offset) =
      [for (j=[0:ny-1])
         for (i=[0:nx-1])
            let (x= i/nx,
                 y= j/ny,
                 z = fbottom(x,y))
            [width * i/nx, 
             height* j/ny, 
             offset  + z] 
     ]; 

module plane_surface(height,surface,depth=1,thickness,relief)  {
    sign = relief ? +1 : -1;
    nx= len(surface); 
    ny= len(surface[0]);
    echo ("nx=",nx,"ny=",ny);
    width= height* nx/ny ;
    echo("height",height,"width",width);
    image_points = image_plane(width,height,nx,ny,surface,depth,thickness,sign);
    clear_points =clear_plane(width,height,nx,ny,0);
    faces=surface_faces(nx,ny);
    polyhedron(points = concat(image_points,clear_points),
               faces = faces);
}; 


function image_arc(radius,height,nx,ny,surface,depth=1,degrees=360,sign) =   
      [for (j=[0:ny-1])
         for (i=[0:nx-1])
           let (eij= surface[i][ny-1-j] * depth)
           let(a = degrees * i/nx)
           [(radius + sign* eij) * cos(a), 
            (radius + sign* eij) * sin(a), 
             height * j/ny]    
     ]; 

function clear_arc(radius,height,nx,ny,degrees=360) =
      [for (j=[0:ny-1])
         for (i=[0:nx-1])
           let(a = degrees * i/nx)
           [radius  * cos(a), 
            radius  * sin(a), 
            height * j/ny]    
     ]; 

module cylinder_surface(height,surface,depth=1,degrees=360,thickness,relief)  {
    sign = relief ? +1 : -1;
    nx= len(surface); 
    ny= len(surface[0]);
    echo ("nx=",nx,"ny=",ny);
    circumference= height* nx/ny * 360/degrees;
    radius =circumference/(2* PI);
    echo("height",height,"circumference",circumference,"radius",radius);
    image_points = image_arc(radius,height,nx,ny,surface,depth,degrees,sign);
    clear_points =clear_arc(radius-thickness,height,nx,ny,degrees);
    faces=surface_faces(nx,ny);
    polyhedron(points = concat(image_points,clear_points),
               faces = faces);
}; 

/* ------------------- main ------------------ */
include <alfredo2.scad>
        
echo(image_file);

cylinder_surface(
          height=100,
          surface=image_data,
          depth=6,
          degrees=90,
          thickness=6,
          relief=false);
/*
plane_surface(
          height=100,
          surface=image_data,
          depth=6,
          thickness=6,
          relief=false);     
*/
