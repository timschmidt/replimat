declare variable $local:db := concat("/db/",substring-after(system:get-module-load-path(),"/db/"),"/");
declare variable $local:site := "http://dmccooey.com/polyhedra/";
declare variable $local:scad-main := concat($local:db,"solid-main.scad");

declare function local:get-solid($id) {
  let $url := concat($local:site,$id,".txt")
  let $doc := httpclient:get(xs:anyURI($url),false(),())/httpclient:body
  let $doc := util:unescape-uri($doc,"UTF-8")
  let $lines := tokenize($doc,"&#10;")
  let $name := $lines[1]    (: bug -  actually can be multiple lines  :)
  let $vars :=
      for $vline in $lines[starts-with(.,"C")]  
      let $parts := tokenize($vline," = ")
      let $name := $parts[1]
      let $value := normalize-space($parts[2])
      where matches($value,"^(\d|\.)+$")    (: only constant values, not formula :)
      return 
           element var {
                element name {$name},
                element value {$value}
          }
   let $points := 
     for $pline in $lines[starts-with(.,"V")]
     let $parts := tokenize($pline," = ") 
     let $xyz := replace(replace($parts[2],"\(",""),"\)","")
     return  
          element point {$xyz}
   let $faces := 
      for $fline in $lines[starts-with(.,"{")]
      let $list := substring-after(substring-before($fline,"}"),"{")
      return
          element face {$list}

  return 
    element solid {
        element id {$id},
        element name {$name},
        element vars {$vars},
        element points {$points},
        element faces {$faces}
    }
};

declare function local:solid_to_openscad($solid) {
  string-join(
    (
     concat (
     "// source:  ", concat($local:site,$solid/id,".html")),
     "// generated by  http://kitwallace.co.uk/3d/solid.xq",
     concat('Name = "',$solid/name,'";'),
     for $var in $solid/vars/var
        return concat ($var/name, " = ", $var/value, ";"),
     concat("points = [&#10;",
          string-join(
              for $point in $solid/points/point
              return concat("[",$point,"]")
              ,",&#10;")
              , "];"),
     concat("faces = [&#10;",
            string-join(
              for $face in $solid/faces/face
              return concat("[",$face,"]")
              ,",&#10;")
              , "];"),
     "// --------------------------------- ",
     ""
    ),"&#10;"
    )
};

let $id:= request:get-parameter("id",())
let $solid := local:get-solid($id)
let $openscad := if($solid) 
                 then
                    (local:solid_to_openscad($solid),
                     util:binary-to-string(util:binary-doc($local:scad-main))
                    )
                 else ()
let $serialize := util:declare-option("exist:serialize", "format=text media-type=text/text")
let $header := response:set-header('content-disposition', concat("attachment; filename=",$id,".scad")) 
return
  $openscad
