// Wire radius
R=0.8;
// scale
S=10;
// number of sides to wire 
Sides=20;
// Generate the wire frame
Wire = 1;
// Generate the plane faces
Face=0;

function length(p) = sqrt(pow(p[0],2) + pow(p[1],2) + pow(p[2],2));

$fn=Sides;

module cylinder_eps(p1, p2, r) {
   assign(p = p2 - p1)
   assign(distance = length(p)) {   
//      echo(p1,p2,distance);
      translate(p1) sphere(r);
      translate(p1 + p/2)
//rotation of XoY plane by the Z axis with the angle of the [p1 p2] line projection with the X axis on the XoY plane
      rotate([0, 0, atan2(p[1], p[0])]) //rotation
//rotation of ZoX plane by the y axis with the angle given by the z coordinate and the sqrt(x^2 + y^2)) point in the XoY plan
      rotate([0, atan2(sqrt(pow(p[0], 2)+pow(p[1], 2)),p[2]), 0])
      cylinder(h = distance, r = r,center=true);
  }
}

module wire_face(face,points, r=2, i=0) {
    for (i = [0:len(face)-1]) 
         cylinder_eps(points[face[i]],points[face[(i+1)% len(face)]], r);
}

module wire_polyhedron(points,faces,r) {
   for (i =[0:len(faces)-1])
      wire_face(faces[i],points,r);
}


//   from http://dmccooey.com/polyhedra/LpentagonalHexecontahedron.html

C0  = 0.192893711352359022108262546061;
C1  = 0.218483370127321224365534157111;
C2  = 0.374821658114562295266609516608;
C3  = 0.567715369466921317374872062669;
C4  = 0.728335176957191477360671629838;
C5  = 0.755467260516595579705585253517;
C6  = 0.824957552676275846265811111988;
C7  = 0.921228888309550499468934175898;
C8  = 0.959987701391583803994339068107;
C9  = 1.13706613386050418840961998424;
C10 = 1.16712343647533397917215468549;
C11 = 1.22237170490362309266282747264;
C12 = 1.27209628257581214613814794036;
C13 = 1.52770307085850512136921113078;
C14 = 1.64691794069037444140475745697;
C15 = 1.74618644098582634573474528789;
C16 = 1.86540131081769566577029161408;
C17 = 1.88844538928366915418351670356;
C18 = 1.97783896542021867236841272616;
C19 = 2.097053835252087992403959052348;

points = [
[  C0,  -C1,  C19],
 [  C0,   C1, -C19],
 [ -C0,   C1,  C19],
[ -C0,  -C1, -C19],
[ C19,  -C0,   C1],
[ C19,   C0,  -C1],
[-C19,   C0,   C1],
[-C19,  -C0,  -C1],
 [  C1, -C19,   C0],
 [  C1,  C19,  -C0],
 [ -C1,  C19,   C0],
 [ -C1, -C19,  -C0],
 [ 0.0,   C5,  C18],
[ 0.0,   C5, -C18],
 [ 0.0,  -C5,  C18],
 [ 0.0,  -C5, -C18],
 [ C18,  0.0,   C5],
 [ C18,  0.0,  -C5],
 [-C18,  0.0,   C5],
 [-C18,  0.0,  -C5],
 [  C5,  C18,  0.0],
 [  C5, -C18,  0.0],
[ -C5,  C18,  0.0],
 [ -C5, -C18,  0.0],
 [ C10,  0.0,  C17],
 [ C10,  0.0, -C17],
 [-C10,  0.0,  C17],
 [-C10,  0.0, -C17],
 [ C17,  C10,  0.0],
 [ C17, -C10,  0.0],
 [-C17,  C10,  0.0],
 [-C17, -C10,  0.0],
[ 0.0,  C17,  C10],
[ 0.0,  C17, -C10],
 [ 0.0, -C17,  C10],
 [ 0.0, -C17, -C10],
 [  C3,   C6,  C16],
 [  C3,  -C6, -C16],
 [ -C3,  -C6,  C16],
 [ -C3,   C6, -C16],
 [ C16,   C3,   C6],
 [ C16,  -C3,  -C6],
 [-C16,  -C3,   C6],
 [-C16,   C3,  -C6],
[  C6,  C16,   C3],
 [  C6, -C16,  -C3],
[ -C6, -C16,   C3],
[ -C6,  C16,  -C3],
 [  C2,  -C9,  C15],
[  C2,   C9, -C15],
[ -C2,   C9,  C15],
[ -C2,  -C9, -C15],
 [ C15,  -C2,   C9],
 [ C15,   C2,  -C9],
 [-C15,   C2,   C9],
 [-C15,  -C2,  -C9],
 [  C9, -C15,   C2],
[  C9,  C15,  -C2],
[ -C9,  C15,   C2],
[ -C9, -C15,  -C2],
 [  C7,  -C8,  C14],
 [  C7,   C8, -C14],
 [ -C7,   C8,  C14],
 [ -C7,  -C8, -C14],
 [ C14,  -C7,   C8],
[ C14,   C7,  -C8],
[-C14,   C7,   C8],
 [-C14,  -C7,  -C8],
 [  C8, -C14,   C7],
[  C8,  C14,  -C7],
 [ -C8,  C14,   C7],
 [ -C8, -C14,  -C7],
 [  C4,  C12,  C13],
 [  C4, -C12, -C13],
[ -C4, -C12,  C13],
 [ -C4,  C12, -C13],
 [ C13,   C4,  C12],
 [ C13,  -C4, -C12],
 [-C13,  -C4,  C12],
 [-C13,   C4, -C12],
 [ C12,  C13,   C4],
 [ C12, -C13,  -C4],
 [-C12, -C13,   C4],
[-C12,  C13,  -C4],
 [ C11,  C11,  C11],
 [ C11,  C11, -C11],
 [ C11, -C11,  C11],
 [ C11, -C11, -C11],
 [-C11,  C11,  C11],
[-C11,  C11, -C11],
 [-C11, -C11,  C11],
 [-C11, -C11, -C11]
];


faces= [
[ 24,  0, 14, 48, 60 ],
[ 24, 60, 86, 64, 52 ],
[ 24, 52, 16, 40, 76 ],
[ 24, 76, 84, 72, 36 ],
[ 24, 36, 12,  2,  0 ],
[ 25,  1, 13, 49, 61 ],
[ 25, 61, 85, 65, 53 ],
[ 25, 53, 17, 41, 77 ],
[ 25, 77, 87, 73, 37 ],
[ 25, 37, 15,  3,  1 ],
[ 26,  2, 12, 50, 62 ],
[ 26, 62, 88, 66, 54 ],
[ 26, 54, 18, 42, 78 ],
[ 26, 78, 90, 74, 38 ],
[ 26, 38, 14,  0,  2 ],
[ 27,  3, 15, 51, 63 ],
[ 27, 63, 91, 67, 55 ],
[ 27, 55, 19, 43, 79 ],
[ 27, 79, 89, 75, 39 ],
[ 27, 39, 13,  1,  3 ],
[ 28,  5, 17, 53, 65 ],
[ 28, 65, 85, 69, 57 ],
[ 28, 57, 20, 44, 80 ],
[ 28, 80, 84, 76, 40 ],
[ 28, 40, 16,  4,  5 ],
[ 29,  4, 16, 52, 64 ],
[ 29, 64, 86, 68, 56 ],
[ 29, 56, 21, 45, 81 ],
[ 29, 81, 87, 77, 41 ],
[ 29, 41, 17,  5,  4 ],
[ 30,  6, 18, 54, 66 ],
[ 30, 66, 88, 70, 58 ],
[ 30, 58, 22, 47, 83 ],
[ 30, 83, 89, 79, 43 ],
[ 30, 43, 19,  7,  6 ],
[ 31,  7, 19, 55, 67 ],
[ 31, 67, 91, 71, 59 ],
[ 31, 59, 23, 46, 82 ],
[ 31, 82, 90, 78, 42 ],
[ 31, 42, 18,  6,  7 ],
[ 32, 10, 22, 58, 70 ],
[ 32, 70, 88, 62, 50 ],
[ 32, 50, 12, 36, 72 ],
[ 32, 72, 84, 80, 44 ],
[ 32, 44, 20,  9, 10 ],
[ 33,  9, 20, 57, 69 ],
[ 33, 69, 85, 61, 49 ],
[ 33, 49, 13, 39, 75 ],
[ 33, 75, 89, 83, 47 ],
[ 33, 47, 22, 10,  9 ],
[ 34,  8, 21, 56, 68 ],
[ 34, 68, 86, 60, 48 ],
[ 34, 48, 14, 38, 74 ],
[ 34, 74, 90, 82, 46 ],
[ 34, 46, 23, 11,  8 ],
[ 35, 11, 23, 59, 71 ],
[ 35, 71, 91, 63, 51 ],
[ 35, 51, 15, 37, 73 ],
[ 35, 73, 87, 81, 45 ],
[ 35, 45, 21,  8, 11 ]
];
if (Wire) wire_polyhedron(S* points,faces,R);
if (Face) polyhedron(points=S* points,faces=faces);

